schema {
    query: Query
    mutation: Mutation
}

type Query {

    # Codespaces that the current user has access to
    # codespaces: [String]

    situationElements(codespace: String!, authority: String!): [SituationElement]
}

type Mutation {
    createOrUpdateSituationElement(codespace: String!, authority: String!, input: SituationElementInput!): String
}

type SituationElement {
    id: ID!
    creationTime: String
    participantRef: String
    situationNumber: String
    source: Source
    progress: String
    validityPeriod: ValidityPeriod
    severity: String
    reportType: String
    summary: Text
    description: Text
    advice: Text
    affects: Affects
    infoLinks: InfoLinks
}

input SituationElementInput {
    id: ID
    creationTime: String
    participantRef: String
    situationNumber: String
    source: SourceInput
    progress: String
    validityPeriod: ValidityPeriodInput
    severity: String
    reportType: String
    summary: TextInput
    description: TextInput
    advice: TextInput
    affects: AffectsInput
    infoLinks: InfoLinksInput
}

type Source {
    sourceType: String
}

input SourceInput {
    sourceType: String
}

type ValidityPeriod {
    startTime: String
    endTime: String
}

input ValidityPeriodInput {
    startTime: String
    endTime: String
}

type Text {
    attributes: Attributes
    text: String
}

input TextInput {
    attributes: AttributesInput
    text: String
}

type Attributes {
    xmlLang: String
}

input AttributesInput {
    xmlLang: String
}


type Affects {
    networks: Networks
    stopPoints: StopPoints
    vehicleJourneys: VehicleJourneys
}

input AffectsInput {
    networks: NetworksInput
    stopPoints: StopPointsInput
    vehicleJourneys: VehicleJourneysInput
}

type Networks {
    affectedNetwork: AffectedNetwork
}

input NetworksInput {
    affectedNetwork: AffectedNetworkInput
}

type AffectedNetwork {
    affectedLine: AffectedLine
}

input AffectedNetworkInput {
    affectedLine: AffectedLineInput
}

type AffectedLine {
    lineRef: String
    routes: Routes
}

input AffectedLineInput {
    lineRef: String
    routes: RoutesInput
}

type Routes {
    affectedRoute: Route
}

input RoutesInput {
    affectedRoute: RouteInput
}

type Route {
    stopPoints: StopPoints
}

input RouteInput {
    stopPoints: StopPointsInput
}

type StopPoints {
    affectedStopPoint: [AffectedStopPoint]
}

input StopPointsInput {
    affectedStopPoint: [AffectedStopPointInput]
}

type AffectedStopPoint {
    stopPointRef: String
}

input AffectedStopPointInput {
    stopPointRef: String
}

type InfoLinks {
    infoLink: InfoLink
}

input InfoLinksInput {
    infoLink: InfoLinkInput
}

type InfoLink {
    uri: String
    label: String
}

input InfoLinkInput {
    uri: String
    label: String
}

type VehicleJourneys {
    affectedVehicleJourney: AffectedVehicleJourney
}

input VehicleJourneysInput {
    affectedVehicleJourney: AffectedVehicleJourneyInput
}

type AffectedVehicleJourney {
    framedVehicleJourneyRef: FramedVehicleJourneyRef
    route: Route
}

input AffectedVehicleJourneyInput {
    framedVehicleJourneyRef: FramedVehicleJourneyRefInput
    route: RouteInput
}

type FramedVehicleJourneyRef {
    dataFrameRef: String
    datedVehicleJourneyRef: String
}

input FramedVehicleJourneyRefInput {
    dataFrameRef: String
    datedVehicleJourneyRef: String
}
