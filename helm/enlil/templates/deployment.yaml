apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "enlil.common.labels" . | indent 4 }}
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.deployment.name }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "{{ .Values.management.port }}"
        prometheus.io/scrape: 'true'
      labels:
        {{- include "enlil.common.labels" . | indent 8 }}
    spec:
      containers:
        - name: {{ .Values.deployment.name }}
          image: {{ .Values.image.identifier }}
          imagePullPolicy: {{ .Values.image.imagePullPolicy }}
          env:
            - name: JDK_JAVA_OPTIONS
              value: -server -Xss{{ .Values.resources.xss }} -Xmx{{ .Values.resources.xmx }} -Dspring.config.location=/etc/application-config/application.properties
                 -Dfile.encoding=UTF-8
            - name: TZ
              value: Europe/Oslo
          envFrom:
            - secretRef:
                name: auth0
          ports:
            - containerPort: {{ .Values.service.http.internalPort }}
              protocol: TCP
          resources:
            limits:
              memory: "{{ .Values.resources.memLimit }}"
            requests:
              cpu: "{{ .Values.resources.cpuRequest }}"
              memory: "{{ .Values.resources.memRequest }}"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /etc/application-config
              name: application-config
              readOnly: true
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: {{ .Values.management.port }}
            initialDelaySeconds: 0
            failureThreshold: 5
            periodSeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: {{ .Values.management.port }}
              scheme: HTTP
            initialDelaySeconds: 10
            failureThreshold: 10
            periodSeconds: 10
            timeoutSeconds: 10
          startupProbe:
            tcpSocket:
              port: {{ .Values.service.http.internalPort }}
            failureThreshold: 20
            periodSeconds: 1
            timeoutSeconds: 5
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      serviceAccountName: application
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      terminationGracePeriodSeconds: 31
      topologySpreadConstraints:
        - maxSkew: 3
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: {{ .Values.deployment.name }}
        - maxSkew: 5
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: {{ .Values.deployment.name }}
      volumes:
        - name: application-config
          configMap:
            name: {{ .Values.configMapMount.name }}
            defaultMode: 420
